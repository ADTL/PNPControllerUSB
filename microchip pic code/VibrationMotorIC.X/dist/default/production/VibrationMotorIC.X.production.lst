

Microchip Technology PIC LITE Macro Assembler V1.30 build 55553 
                                                                                               Mon Jan 20 11:10:27 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  0011                     	;# 
    33  0012                     	;# 
    34  0015                     	;# 
    35  0016                     	;# 
    36  0016                     	;# 
    37  0017                     	;# 
    38  0018                     	;# 
    39  0019                     	;# 
    40  001A                     	;# 
    41  001B                     	;# 
    42  001C                     	;# 
    43  001E                     	;# 
    44  001F                     	;# 
    45  008C                     	;# 
    46  0091                     	;# 
    47  0092                     	;# 
    48  0095                     	;# 
    49  0096                     	;# 
    50  0097                     	;# 
    51  0098                     	;# 
    52  0099                     	;# 
    53  009A                     	;# 
    54  009B                     	;# 
    55  009B                     	;# 
    56  009C                     	;# 
    57  009D                     	;# 
    58  009E                     	;# 
    59  010C                     	;# 
    60  0111                     	;# 
    61  0112                     	;# 
    62  0115                     	;# 
    63  0116                     	;# 
    64  0117                     	;# 
    65  0118                     	;# 
    66  0119                     	;# 
    67  011A                     	;# 
    68  011B                     	;# 
    69  011D                     	;# 
    70  011D                     	;# 
    71  018C                     	;# 
    72  0191                     	;# 
    73  0191                     	;# 
    74  0192                     	;# 
    75  0193                     	;# 
    76  0193                     	;# 
    77  0193                     	;# 
    78  0194                     	;# 
    79  0195                     	;# 
    80  0196                     	;# 
    81  0199                     	;# 
    82  019A                     	;# 
    83  019B                     	;# 
    84  019B                     	;# 
    85  019B                     	;# 
    86  019B                     	;# 
    87  019C                     	;# 
    88  019C                     	;# 
    89  019D                     	;# 
    90  019E                     	;# 
    91  019F                     	;# 
    92  020C                     	;# 
    93  0211                     	;# 
    94  0211                     	;# 
    95  0212                     	;# 
    96  0212                     	;# 
    97  0213                     	;# 
    98  0213                     	;# 
    99  0214                     	;# 
   100  0214                     	;# 
   101  0215                     	;# 
   102  0215                     	;# 
   103  0215                     	;# 
   104  0216                     	;# 
   105  0216                     	;# 
   106  0217                     	;# 
   107  0217                     	;# 
   108  0291                     	;# 
   109  0291                     	;# 
   110  0292                     	;# 
   111  0293                     	;# 
   112  0294                     	;# 
   113  0295                     	;# 
   114  0295                     	;# 
   115  0296                     	;# 
   116  0391                     	;# 
   117  0392                     	;# 
   118  0393                     	;# 
   119  039A                     	;# 
   120  039C                     	;# 
   121  039D                     	;# 
   122  039E                     	;# 
   123  039F                     	;# 
   124  0FE4                     	;# 
   125  0FE5                     	;# 
   126  0FE6                     	;# 
   127  0FE7                     	;# 
   128  0FE8                     	;# 
   129  0FE9                     	;# 
   130  0FEA                     	;# 
   131  0FEB                     	;# 
   132  0FED                     	;# 
   133  0FEE                     	;# 
   134  0FEF                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  008C                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0095                     	;# 
   165  0096                     	;# 
   166  0097                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009A                     	;# 
   170  009B                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  010C                     	;# 
   176  0111                     	;# 
   177  0112                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0118                     	;# 
   182  0119                     	;# 
   183  011A                     	;# 
   184  011B                     	;# 
   185  011D                     	;# 
   186  011D                     	;# 
   187  018C                     	;# 
   188  0191                     	;# 
   189  0191                     	;# 
   190  0192                     	;# 
   191  0193                     	;# 
   192  0193                     	;# 
   193  0193                     	;# 
   194  0194                     	;# 
   195  0195                     	;# 
   196  0196                     	;# 
   197  0199                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  020C                     	;# 
   209  0211                     	;# 
   210  0211                     	;# 
   211  0212                     	;# 
   212  0212                     	;# 
   213  0213                     	;# 
   214  0213                     	;# 
   215  0214                     	;# 
   216  0214                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0216                     	;# 
   221  0216                     	;# 
   222  0217                     	;# 
   223  0217                     	;# 
   224  0291                     	;# 
   225  0291                     	;# 
   226  0292                     	;# 
   227  0293                     	;# 
   228  0294                     	;# 
   229  0295                     	;# 
   230  0295                     	;# 
   231  0296                     	;# 
   232  0391                     	;# 
   233  0392                     	;# 
   234  0393                     	;# 
   235  039A                     	;# 
   236  039C                     	;# 
   237  039D                     	;# 
   238  039E                     	;# 
   239  039F                     	;# 
   240  0FE4                     	;# 
   241  0FE5                     	;# 
   242  0FE6                     	;# 
   243  0FE7                     	;# 
   244  0FE8                     	;# 
   245  0FE9                     	;# 
   246  0FEA                     	;# 
   247  0FEB                     	;# 
   248  0FED                     	;# 
   249  0FEE                     	;# 
   250  0FEF                     	;# 
   251  000B                     _INTCONbits	set	11
   252  0011                     _PIR1bits	set	17
   253  001B                     _PR2	set	27
   254  001C                     _T2CONbits	set	28
   255  009D                     _ADCON0bits	set	157
   256  0099                     _OSCCONbits	set	153
   257  0091                     _PIE1bits	set	145
   258  008C                     _TRISAbits	set	140
   259  011D                     _APFCONbits	set	285
   260  0118                     _DACCON0bits	set	280
   261  018C                     _ANSELAbits	set	396
   262  0212                     _SSP1ADD	set	530
   263  0211                     _SSP1BUF	set	529
   264  0215                     _SSP1CON1	set	533
   265  0215                     _SSP1CON1bits	set	533
   266  0216                     _SSP1CON2	set	534
   267  0217                     _SSP1CON3	set	535
   268  0214                     _SSP1STAT	set	532
   269  0293                     _CCP1CONbits	set	659
   270  0291                     _CCPR1L	set	657
   271                           
   272                           	psect	text0
   273  0000                     __ptext0:	
   274                           ; #config settings
   275                           
   276                           
   277                           ;psect for function _WriteI2C
   278  0000                     
   279                           	psect	cinit
   280  0057                     start_initialization:	
   281  0057                     __initialization:	
   282                           
   283                           ; Clear objects allocated to COMMON
   284  0057  01F8               	clrf	__pbssCOMMON& (0+127)
   285                           
   286                           ; Clear objects allocated to BANK0
   287  0058  3020               	movlw	low __pbssBANK0
   288  0059  0084               	movwf	4
   289  005A  3000               	movlw	high __pbssBANK0
   290  005B  0085               	movwf	5
   291  005C  3010               	movlw	16
   292  005D  20F9               	fcall	clear_ram0
   293  005E                     end_of_initialization:	
   294                           ;End of C runtime variable initialization code
   295                           
   296  005E                     __end_of__initialization:	
   297  005E  0020               	movlb	0
   298  005F  28C5               	ljmp	_main	;jump to C main() function
   299                           
   300                           	psect	bssCOMMON
   301  0078                     __pbssCOMMON:	
   302  0078                     _bufferIndex:	
   303  0078                     	ds	1
   304                           
   305                           	psect	bssBANK0
   306  0020                     __pbssBANK0:	
   307  0020                     _receiveBuffer:	
   308  0020                     	ds	8
   309  0028                     _sendBuffer:	
   310  0028                     	ds	8
   311                           
   312                           	psect	clrtext
   313  00F9                     clear_ram0:	
   314                           ;	Called with FSR0 containing the base address, and
   315                           ;	WREG with the size to clear
   316                           
   317  00F9  0064               	clrwdt	;clear the watchdog before getting into this loop
   318  00FA                     clrloop0:	
   319  00FA  0180               	clrf	0	;clear RAM location pointed to by FSR
   320  00FB  3101               	addfsr 0,1
   321  00FC  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   322  00FD  28FA               	goto	clrloop0	;have we reached the end yet?
   323  00FE  3400               	retlw	0	;all done for this memory range, return
   324                           
   325                           	psect	cstackCOMMON
   326  0070                     __pcstackCOMMON:	
   327  0070                     ?_init:	
   328  0070                     ?_SetPWMDutyCyle:	
   329                           ; 0 bytes @ 0x0
   330                           
   331  0070                     ?_startPWM:	
   332                           ; 0 bytes @ 0x0
   333                           
   334  0070                     ?_stopPWM:	
   335                           ; 0 bytes @ 0x0
   336                           
   337  0070                     ?_WriteI2C:	
   338                           ; 0 bytes @ 0x0
   339                           
   340  0070                     ??_WriteI2C:	
   341                           ; 0 bytes @ 0x0
   342                           
   343  0070                     ?_isr:	
   344                           ; 0 bytes @ 0x0
   345                           
   346                           
   347                           ; 0 bytes @ 0x0
   348  0070                     	ds	1
   349  0071                     WriteI2C@transmitByte:	
   350                           
   351                           ; 1 bytes @ 0x1
   352  0071                     	ds	1
   353  0072                     WriteI2C@writeCollision:	
   354                           
   355                           ; 1 bytes @ 0x2
   356  0072                     	ds	1
   357  0073                     ??_isr:	
   358                           
   359                           ; 0 bytes @ 0x3
   360  0073                     	ds	2
   361  0075                     isr@temp:	
   362                           
   363                           ; 1 bytes @ 0x5
   364  0075                     	ds	1
   365  0076                     isr@i2c_mask:	
   366                           
   367                           ; 1 bytes @ 0x6
   368  0076                     	ds	1
   369  0077                     isr@tempSSPSTAT:	
   370                           
   371                           ; 1 bytes @ 0x7
   372  0077                     	ds	1
   373                           
   374                           	psect	cstackBANK0
   375  0030                     __pcstackBANK0:	
   376  0030                     ??_init:	
   377  0030                     ??_SetPWMDutyCyle:	
   378                           ; 0 bytes @ 0x0
   379                           
   380  0030                     ??_startPWM:	
   381                           ; 0 bytes @ 0x0
   382                           
   383  0030                     ??_stopPWM:	
   384                           ; 0 bytes @ 0x0
   385                           
   386                           
   387                           ; 0 bytes @ 0x0
   388  0030                     	ds	2
   389  0032                     SetPWMDutyCyle@duty_cycle_value:	
   390                           
   391                           ; 1 bytes @ 0x2
   392  0032                     	ds	1
   393  0033                     SetPWMDutyCyle@duty_cycle:	
   394                           
   395                           ; 2 bytes @ 0x3
   396  0033                     	ds	2
   397  0035                     ?_main:	
   398  0035                     main@argc:	
   399                           ; 2 bytes @ 0x5
   400                           
   401                           
   402                           ; 2 bytes @ 0x5
   403  0035                     	ds	2
   404  0037                     main@argv:	
   405                           
   406                           ; 2 bytes @ 0x7
   407  0037                     	ds	2
   408  0039                     ??_main:	
   409                           
   410                           	psect	maintext
   411  00C5                     __pmaintext:	
   412                           ; 0 bytes @ 0x9
   413 ;;
   414 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   415 ;;
   416 ;; *************** function _main *****************
   417 ;; Defined at:
   418 ;;		line 198 in file "main.c"
   419 ;; Parameters:    Size  Location     Type
   420 ;;  argc            2    5[BANK0 ] int 
   421 ;;  argv            2    7[BANK0 ] PTR PTR unsigned char 
   422 ;; Auto vars:     Size  Location     Type
   423 ;;		None
   424 ;; Return value:  Size  Location     Type
   425 ;;                  2    5[BANK0 ] int 
   426 ;; Registers used:
   427 ;;		wreg, status,2, status,0, pclath, cstack
   428 ;; Tracked objects:
   429 ;;		On entry : 17F/0
   430 ;;		On exit  : 0/0
   431 ;;		Unchanged: 0/0
   432 ;; Data sizes:     COMMON   BANK0   BANK1
   433 ;;      Params:         0       4       0
   434 ;;      Locals:         0       0       0
   435 ;;      Temps:          0       0       0
   436 ;;      Totals:         0       4       0
   437 ;;Total ram usage:        4 bytes
   438 ;; Hardware stack levels required when called:    3
   439 ;; This function calls:
   440 ;;		_SetPWMDutyCyle
   441 ;;		_init
   442 ;;		_startPWM
   443 ;;		_stopPWM
   444 ;; This function is called by:
   445 ;;		Startup code after reset
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           
   450                           ;psect for function _main
   451  00C5                     _main:	
   452                           
   453                           ;main.c: 200: init();
   454                           
   455                           ;incstack = 0
   456                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   457  00C5  2060               	fcall	_init
   458                           
   459                           ;main.c: 201: SetPWMDutyCyle(100);
   460  00C6  3064               	movlw	100
   461  00C7  209F               	fcall	_SetPWMDutyCyle
   462                           
   463                           ;main.c: 202: stopPWM();
   464  00C8  20FF               	fcall	_stopPWM
   465  00C9                     l84:	
   466                           ;main.c: 203: do{
   467                           
   468                           
   469                           ;main.c: 204: if(receiveBuffer[0] == 0x01){
   470  00C9  0020               	movlb	0	; select bank0
   471  00CA  0820               	movf	_receiveBuffer,w
   472  00CB  3A01               	xorlw	1
   473  00CC  1D03               	skipz
   474  00CD  28D1               	goto	l778
   475                           
   476                           ;main.c: 205: startPWM();
   477  00CE  2102               	fcall	_startPWM
   478                           
   479                           ;main.c: 206: receiveBuffer[0] = 0x00;
   480  00CF  0020               	movlb	0	; select bank0
   481  00D0  01A0               	clrf	_receiveBuffer
   482  00D1                     l778:	
   483                           
   484                           ;main.c: 207: }
   485                           ;main.c: 208: if(receiveBuffer[0] == 0x02){
   486  00D1  0820               	movf	_receiveBuffer,w
   487  00D2  3A02               	xorlw	2
   488  00D3  1D03               	skipz
   489  00D4  28D8               	goto	l784
   490                           
   491                           ;main.c: 209: stopPWM();
   492  00D5  20FF               	fcall	_stopPWM
   493                           
   494                           ;main.c: 210: receiveBuffer[0] = 0x00;
   495  00D6  0020               	movlb	0	; select bank0
   496  00D7  01A0               	clrf	_receiveBuffer
   497  00D8                     l784:	
   498                           
   499                           ;main.c: 211: }
   500                           ;main.c: 212: if(receiveBuffer[0] == 0x03){
   501  00D8  0820               	movf	_receiveBuffer,w
   502  00D9  3A03               	xorlw	3
   503  00DA  1D03               	skipz
   504  00DB  28C9               	goto	l84
   505                           
   506                           ;main.c: 213: SetPWMDutyCyle(receiveBuffer[1]);
   507  00DC  0821               	movf	_receiveBuffer+1,w
   508  00DD  209F               	fcall	_SetPWMDutyCyle
   509                           
   510                           ;main.c: 215: receiveBuffer[0] = 0x00;
   511  00DE  0020               	movlb	0	; select bank0
   512  00DF  01A0               	clrf	_receiveBuffer
   513                           
   514                           ;main.c: 216: }
   515                           ;main.c: 218: } while (1);
   516  00E0  28C9               	goto	l84
   517  00E1                     __end_of_main:	
   518                           ;main.c: 220: return (0);
   519                           ;	Return value of _main is never used
   520                           
   521                           
   522                           	psect	text1
   523  00FF                     __ptext1:	
   524 ;; *************** function _stopPWM *****************
   525 ;; Defined at:
   526 ;;		line 133 in file "main.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;		None
   531 ;; Return value:  Size  Location     Type
   532 ;;		None               void
   533 ;; Registers used:
   534 ;;		None
   535 ;; Tracked objects:
   536 ;;		On entry : 0/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMMON   BANK0   BANK1
   540 ;;      Params:         0       0       0
   541 ;;      Locals:         0       0       0
   542 ;;      Temps:          0       0       0
   543 ;;      Totals:         0       0       0
   544 ;;Total ram usage:        0 bytes
   545 ;; Hardware stack levels used:    1
   546 ;; Hardware stack levels required when called:    2
   547 ;; This function calls:
   548 ;;		Nothing
   549 ;; This function is called by:
   550 ;;		_main
   551 ;; This function uses a non-reentrant model
   552 ;;
   553                           
   554                           
   555                           ;psect for function _stopPWM
   556  00FF                     _stopPWM:	
   557                           
   558                           ;main.c: 134: TRISAbits.TRISA5 = 1;
   559                           
   560                           ;incstack = 0
   561                           ; Regs used in _stopPWM: []
   562  00FF  0021               	movlb	1	; select bank1
   563  0100  168C               	bsf	12,5	;volatile
   564  0101  0008               	return
   565  0102                     __end_of_stopPWM:	
   566                           
   567                           	psect	text2
   568  0102                     __ptext2:	
   569 ;; *************** function _startPWM *****************
   570 ;; Defined at:
   571 ;;		line 129 in file "main.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;		None
   574 ;; Auto vars:     Size  Location     Type
   575 ;;		None
   576 ;; Return value:  Size  Location     Type
   577 ;;		None               void
   578 ;; Registers used:
   579 ;;		None
   580 ;; Tracked objects:
   581 ;;		On entry : 0/0
   582 ;;		On exit  : 0/0
   583 ;;		Unchanged: 0/0
   584 ;; Data sizes:     COMMON   BANK0   BANK1
   585 ;;      Params:         0       0       0
   586 ;;      Locals:         0       0       0
   587 ;;      Temps:          0       0       0
   588 ;;      Totals:         0       0       0
   589 ;;Total ram usage:        0 bytes
   590 ;; Hardware stack levels used:    1
   591 ;; Hardware stack levels required when called:    2
   592 ;; This function calls:
   593 ;;		Nothing
   594 ;; This function is called by:
   595 ;;		_main
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           
   600                           ;psect for function _startPWM
   601  0102                     _startPWM:	
   602                           
   603                           ;main.c: 130: TRISAbits.TRISA5 = 0;
   604                           
   605                           ;incstack = 0
   606                           ; Regs used in _startPWM: []
   607  0102  0021               	movlb	1	; select bank1
   608  0103  128C               	bcf	12,5	;volatile
   609  0104  0008               	return
   610  0105                     __end_of_startPWM:	
   611                           
   612                           	psect	text3
   613  0060                     __ptext3:	
   614 ;; *************** function _init *****************
   615 ;; Defined at:
   616 ;;		line 57 in file "main.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;		None
   619 ;; Auto vars:     Size  Location     Type
   620 ;;		None
   621 ;; Return value:  Size  Location     Type
   622 ;;		None               void
   623 ;; Registers used:
   624 ;;		wreg, status,2, status,0
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMMON   BANK0   BANK1
   630 ;;      Params:         0       0       0
   631 ;;      Locals:         0       0       0
   632 ;;      Temps:          0       0       0
   633 ;;      Totals:         0       0       0
   634 ;;Total ram usage:        0 bytes
   635 ;; Hardware stack levels used:    1
   636 ;; Hardware stack levels required when called:    2
   637 ;; This function calls:
   638 ;;		Nothing
   639 ;; This function is called by:
   640 ;;		_main
   641 ;; This function uses a non-reentrant model
   642 ;;
   643                           
   644                           
   645                           ;psect for function _init
   646  0060                     _init:	
   647                           
   648                           ;main.c: 60: OSCCONbits.SPLLEN=0;
   649                           
   650                           ;incstack = 0
   651                           ; Regs used in _init: [wreg+status,2+status,0]
   652  0060  0021               	movlb	1	; select bank1
   653  0061  1399               	bcf	25,7	;volatile
   654                           
   655                           ;main.c: 61: OSCCONbits.IRCF=0x0F;
   656  0062  3078               	movlw	120
   657  0063  0499               	iorwf	25,f	;volatile
   658                           
   659                           ;main.c: 62: OSCCONbits.SCS=0x02;
   660  0064  0819               	movf	25,w	;volatile
   661  0065  39FC               	andlw	-4
   662  0066  3802               	iorlw	2
   663  0067  0099               	movwf	25	;volatile
   664                           
   665                           ;main.c: 65: ANSELAbits.ANSELA=0;
   666  0068  30E0               	movlw	-32
   667  0069  0023               	movlb	3	; select bank3
   668  006A  058C               	andwf	12,f	;volatile
   669                           
   670                           ;main.c: 66: ADCON0bits.ADON=0;
   671  006B  0021               	movlb	1	; select bank1
   672  006C  101D               	bcf	29,0	;volatile
   673                           
   674                           ;main.c: 67: DACCON0bits.DACEN=0;
   675  006D  0022               	movlb	2	; select bank2
   676  006E  1398               	bcf	24,7	;volatile
   677                           
   678                           ;main.c: 70: TRISAbits.TRISA0 = 0;
   679  006F  0021               	movlb	1	; select bank1
   680  0070  100C               	bcf	12,0	;volatile
   681                           
   682                           ;main.c: 71: TRISAbits.TRISA1 = 1;
   683  0071  148C               	bsf	12,1	;volatile
   684                           
   685                           ;main.c: 72: TRISAbits.TRISA2 = 1;
   686  0072  150C               	bsf	12,2	;volatile
   687                           
   688                           ;main.c: 73: TRISAbits.TRISA3 = 0;
   689  0073  118C               	bcf	12,3	;volatile
   690                           
   691                           ;main.c: 74: TRISAbits.TRISA4 = 0;
   692  0074  120C               	bcf	12,4	;volatile
   693                           
   694                           ;main.c: 75: TRISAbits.TRISA5 = 0;
   695  0075  128C               	bcf	12,5	;volatile
   696                           
   697                           ;main.c: 77: APFCONbits.CCP1SEL = 1;
   698  0076  0022               	movlb	2	; select bank2
   699  0077  141D               	bsf	29,0	;volatile
   700                           
   701                           ;main.c: 86: TRISAbits.TRISA5 = 1;
   702  0078  0021               	movlb	1	; select bank1
   703  0079  168C               	bsf	12,5	;volatile
   704                           
   705                           ;main.c: 88: CCP1CONbits.CCP1M=0x0C;
   706  007A  0025               	movlb	5	; select bank5
   707  007B  0813               	movf	19,w	;volatile
   708  007C  39F0               	andlw	-16
   709  007D  380C               	iorlw	12
   710  007E  0093               	movwf	19	;volatile
   711                           
   712                           ;main.c: 89: CCP1CONbits.P1M=0x00;
   713  007F  303F               	movlw	-193
   714  0080  0593               	andwf	19,f	;volatile
   715                           
   716                           ;main.c: 91: PR2 = 0xff;
   717  0081  30FF               	movlw	255
   718  0082  0020               	movlb	0	; select bank0
   719  0083  009B               	movwf	27	;volatile
   720                           
   721                           ;main.c: 93: CCPR1L = 0x00;
   722  0084  0025               	movlb	5	; select bank5
   723  0085  0191               	clrf	17	;volatile
   724                           
   725                           ;main.c: 94: CCP1CONbits.DC1B=0x00;
   726  0086  30CF               	movlw	-49
   727  0087  0593               	andwf	19,f	;volatile
   728                           
   729                           ;main.c: 97: PIR1bits.TMR2IF=0;
   730  0088  0020               	movlb	0	; select bank0
   731  0089  1091               	bcf	17,1	;volatile
   732                           
   733                           ;main.c: 98: T2CONbits.T2CKPS=0x00;
   734  008A  30FC               	movlw	-4
   735  008B  059C               	andwf	28,f	;volatile
   736                           
   737                           ;main.c: 99: T2CONbits.TMR2ON=1;
   738  008C  151C               	bsf	28,2	;volatile
   739                           
   740                           ;main.c: 103: TRISAbits.TRISA5 = 0;
   741  008D  0021               	movlb	1	; select bank1
   742  008E  128C               	bcf	12,5	;volatile
   743                           
   744                           ;main.c: 107: INTCONbits.GIE = 1;
   745  008F  178B               	bsf	11,7	;volatile
   746                           
   747                           ;main.c: 108: INTCONbits.PEIE = 1;
   748  0090  170B               	bsf	11,6	;volatile
   749                           
   750                           ;main.c: 109: PIE1bits.SSP1IE = 1;
   751  0091  1591               	bsf	17,3	;volatile
   752                           
   753                           ;main.c: 110: PIR1bits.SSP1IF = 0;
   754  0092  0020               	movlb	0	; select bank0
   755  0093  1191               	bcf	17,3	;volatile
   756                           
   757                           ;main.c: 113: SSP1CON1 = 0b00110110;
   758  0094  3036               	movlw	54
   759  0095  0024               	movlb	4	; select bank4
   760  0096  0095               	movwf	21	;volatile
   761                           
   762                           ;main.c: 114: SSP1CON2 = 0b00000001;
   763  0097  3001               	movlw	1
   764  0098  0096               	movwf	22	;volatile
   765                           
   766                           ;main.c: 115: SSP1CON3 = 0b00010000;
   767  0099  3010               	movlw	16
   768  009A  0097               	movwf	23	;volatile
   769                           
   770                           ;main.c: 116: SSP1STAT = 0b00000000;
   771  009B  0194               	clrf	20	;volatile
   772                           
   773                           ;main.c: 117: SSP1ADD = 0x16;
   774  009C  3016               	movlw	22
   775  009D  0092               	movwf	18	;volatile
   776  009E  0008               	return
   777  009F                     __end_of_init:	
   778                           
   779                           	psect	text4
   780  009F                     __ptext4:	
   781 ;; *************** function _SetPWMDutyCyle *****************
   782 ;; Defined at:
   783 ;;		line 120 in file "main.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;  duty_cycle_v    1    wreg     unsigned char 
   786 ;; Auto vars:     Size  Location     Type
   787 ;;  duty_cycle_v    1    2[BANK0 ] unsigned char 
   788 ;;  duty_cycle      2    3[BANK0 ] unsigned int 
   789 ;; Return value:  Size  Location     Type
   790 ;;		None               void
   791 ;; Registers used:
   792 ;;		wreg, status,2, status,0
   793 ;; Tracked objects:
   794 ;;		On entry : 0/0
   795 ;;		On exit  : 0/0
   796 ;;		Unchanged: 0/0
   797 ;; Data sizes:     COMMON   BANK0   BANK1
   798 ;;      Params:         0       0       0
   799 ;;      Locals:         0       3       0
   800 ;;      Temps:          0       2       0
   801 ;;      Totals:         0       5       0
   802 ;;Total ram usage:        5 bytes
   803 ;; Hardware stack levels used:    1
   804 ;; Hardware stack levels required when called:    2
   805 ;; This function calls:
   806 ;;		Nothing
   807 ;; This function is called by:
   808 ;;		_main
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812                           
   813                           ;psect for function _SetPWMDutyCyle
   814  009F                     _SetPWMDutyCyle:	
   815                           
   816                           ;incstack = 0
   817                           ; Regs used in _SetPWMDutyCyle: [wreg+status,2+status,0]
   818                           ;SetPWMDutyCyle@duty_cycle_value stored from wreg
   819  009F  0020               	movlb	0	; select bank0
   820  00A0  00B2               	movwf	SetPWMDutyCyle@duty_cycle_value
   821                           
   822                           ;main.c: 122: unsigned int duty_cycle;
   823                           ;main.c: 123: duty_cycle = duty_cycle_value * 4;
   824  00A1  0832               	movf	SetPWMDutyCyle@duty_cycle_value,w
   825  00A2  00B0               	movwf	??_SetPWMDutyCyle
   826  00A3  01B1               	clrf	??_SetPWMDutyCyle+1
   827  00A4  35B0               	lslf	??_SetPWMDutyCyle,f
   828  00A5  0DB1               	rlf	??_SetPWMDutyCyle+1,f
   829  00A6  35B0               	lslf	??_SetPWMDutyCyle,f
   830  00A7  0DB1               	rlf	??_SetPWMDutyCyle+1,f
   831  00A8  0830               	movf	??_SetPWMDutyCyle,w
   832  00A9  00B3               	movwf	SetPWMDutyCyle@duty_cycle
   833  00AA  0831               	movf	??_SetPWMDutyCyle+1,w
   834  00AB  00B4               	movwf	SetPWMDutyCyle@duty_cycle+1
   835                           
   836                           ;main.c: 125: CCP1CONbits.DC1B = duty_cycle & 0x03;
   837  00AC  0833               	movf	SetPWMDutyCyle@duty_cycle,w
   838  00AD  3903               	andlw	3
   839  00AE  00B0               	movwf	??_SetPWMDutyCyle
   840  00AF  0EB0               	swapf	??_SetPWMDutyCyle,f
   841  00B0  0025               	movlb	5	; select bank5
   842  00B1  0813               	movf	19,w	;volatile
   843  00B2  0020               	movlb	0	; select bank0
   844  00B3  0630               	xorwf	??_SetPWMDutyCyle,w
   845  00B4  39CF               	andlw	-49
   846  00B5  0630               	xorwf	??_SetPWMDutyCyle,w
   847  00B6  0025               	movlb	5	; select bank5
   848  00B7  0093               	movwf	19	;volatile
   849                           
   850                           ;main.c: 126: CCPR1L = (duty_cycle >> 2);
   851  00B8  0020               	movlb	0	; select bank0
   852  00B9  0834               	movf	SetPWMDutyCyle@duty_cycle+1,w
   853  00BA  00B1               	movwf	??_SetPWMDutyCyle+1
   854  00BB  0833               	movf	SetPWMDutyCyle@duty_cycle,w
   855  00BC  00B0               	movwf	??_SetPWMDutyCyle
   856  00BD  36B1               	lsrf	??_SetPWMDutyCyle+1,f
   857  00BE  0CB0               	rrf	??_SetPWMDutyCyle,f
   858  00BF  36B1               	lsrf	??_SetPWMDutyCyle+1,f
   859  00C0  0CB0               	rrf	??_SetPWMDutyCyle,f
   860  00C1  0830               	movf	??_SetPWMDutyCyle,w
   861  00C2  0025               	movlb	5	; select bank5
   862  00C3  0091               	movwf	17	;volatile
   863  00C4  0008               	return
   864  00C5                     __end_of_SetPWMDutyCyle:	
   865                           
   866                           	psect	intentry
   867  0004                     __pintentry:	
   868 ;; *************** function _isr *****************
   869 ;; Defined at:
   870 ;;		line 152 in file "main.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;		None
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  tempSSPSTAT     1    7[COMMON] unsigned char 
   875 ;;  i2c_mask        1    6[COMMON] unsigned char 
   876 ;;  temp            1    5[COMMON] unsigned char 
   877 ;; Return value:  Size  Location     Type
   878 ;;		None               void
   879 ;; Registers used:
   880 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMMON   BANK0   BANK1
   886 ;;      Params:         0       0       0
   887 ;;      Locals:         3       0       0
   888 ;;      Temps:          2       0       0
   889 ;;      Totals:         5       0       0
   890 ;;Total ram usage:        5 bytes
   891 ;; Hardware stack levels used:    1
   892 ;; Hardware stack levels required when called:    1
   893 ;; This function calls:
   894 ;;		_WriteI2C
   895 ;; This function is called by:
   896 ;;		Interrupt level 1
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900  0004                     _isr:	
   901                           
   902                           ;incstack = 0
   903                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   904  0004  3180               	pagesel	$
   905  0005  0020               	movlb	0	; select bank0
   906  0006  087F               	movf	127,w
   907  0007  00F4               	movwf	??_isr+1
   908                           
   909                           ;main.c: 153: if(PIR1bits.SSP1IF == 1){
   910  0008  1D91               	btfss	17,3	;volatile
   911  0009  2852               	goto	i1l81
   912                           
   913                           ;main.c: 154: PIR1bits.SSP1IF = 0;
   914  000A  1191               	bcf	17,3	;volatile
   915                           
   916                           ;main.c: 155: unsigned char i2c_mask = 0x2D;
   917  000B  302D               	movlw	45
   918  000C  00F3               	movwf	??_isr
   919  000D  0873               	movf	??_isr,w
   920  000E  00F6               	movwf	isr@i2c_mask
   921                           
   922                           ;main.c: 156: unsigned char tempSSPSTAT;
   923                           ;main.c: 157: unsigned char temp;
   924                           ;main.c: 158: tempSSPSTAT = SSP1STAT & i2c_mask;
   925  000F  0024               	movlb	4	; select bank4
   926  0010  0814               	movf	20,w	;volatile
   927  0011  0576               	andwf	isr@i2c_mask,w
   928  0012  00F3               	movwf	??_isr
   929  0013  0873               	movf	??_isr,w
   930  0014  00F7               	movwf	isr@tempSSPSTAT
   931                           
   932                           ;main.c: 160: switch (tempSSPSTAT){
   933  0015  2844               	goto	i1l836
   934  0016                     i1l798:	
   935                           ;main.c: 162: case 0x09:
   936                           
   937                           
   938                           ;main.c: 163: bufferIndex = 0;
   939  0016  01F8               	clrf	_bufferIndex
   940                           
   941                           ;main.c: 164: temp = SSP1BUF;
   942  0017  0811               	movf	17,w	;volatile
   943  0018  00F3               	movwf	??_isr
   944  0019  0873               	movf	??_isr,w
   945  001A  00F5               	movwf	isr@temp
   946  001B  2842               	goto	L2
   947  001C                     i1l804:	
   948                           ;main.c: 169: case 0x29:
   949                           
   950                           ;main.c: 166: break;
   951                           
   952                           ;main.c: 165: SSP1CON1bits.CKP = 1;
   953                           
   954                           
   955                           ;main.c: 170: receiveBuffer[bufferIndex] = SSP1BUF;
   956  001C  0811               	movf	17,w	;volatile
   957  001D  00F3               	movwf	??_isr
   958  001E  0878               	movf	_bufferIndex,w
   959  001F  3E20               	addlw	_receiveBuffer& (0+255)
   960  0020  0086               	movwf	6
   961  0021  0187               	clrf	7
   962  0022  0873               	movf	??_isr,w
   963  0023  0081               	movwf	1
   964                           
   965                           ;main.c: 171: bufferIndex++;
   966  0024  3001               	movlw	1
   967  0025  00F3               	movwf	??_isr
   968  0026  0873               	movf	??_isr,w
   969  0027  07F8               	addwf	_bufferIndex,f
   970                           
   971                           ;main.c: 172: if(bufferIndex >= 7)
   972  0028  3007               	movlw	7
   973  0029  0278               	subwf	_bufferIndex,w
   974  002A  1C03               	skipc
   975  002B  2842               	goto	L2
   976                           
   977                           ;main.c: 173: bufferIndex = 0;
   978  002C  01F8               	clrf	_bufferIndex
   979  002D  2842               	goto	L2
   980  002E                     i1l814:	
   981                           ;main.c: 178: case 0x0D:
   982                           
   983                           ;main.c: 175: break;
   984                           
   985                           ;main.c: 174: SSP1CON1bits.CKP = 1;
   986                           
   987                           
   988                           ;main.c: 179: temp = SSP1BUF;
   989  002E  0811               	movf	17,w	;volatile
   990  002F  00F3               	movwf	??_isr
   991  0030  0873               	movf	??_isr,w
   992  0031  00F5               	movwf	isr@temp
   993  0032  2836               	goto	L3
   994  0033                     i1l824:	
   995                           ;main.c: 187: case 0x2D:
   996                           
   997                           ;main.c: 184: break;
   998                           
   999                           ;main.c: 183: SSP1CON1bits.CKP = 1;
  1000                           
  1001                           ;main.c: 182: bufferIndex++;
  1002                           
  1003                           ;main.c: 181: WriteI2C(sendBuffer[bufferIndex]);
  1004                           
  1005                           ;main.c: 180: bufferIndex = 0;
  1006                           
  1007                           
  1008                           ;main.c: 188: if(bufferIndex >= 8)
  1009  0033  3008               	movlw	8
  1010  0034  0278               	subwf	_bufferIndex,w
  1011  0035  1803               	btfsc	3,0
  1012  0036                     L3:	
  1013                           
  1014                           ;main.c: 189: bufferIndex = 0;
  1015  0036  01F8               	clrf	_bufferIndex
  1016                           
  1017                           ;main.c: 190: WriteI2C(sendBuffer[bufferIndex]);
  1018  0037  0878               	movf	_bufferIndex,w
  1019  0038  3E28               	addlw	_sendBuffer& (0+255)
  1020  0039  0086               	movwf	6
  1021  003A  0187               	clrf	7
  1022  003B  0801               	movf	1,w
  1023  003C  20E1               	fcall	_WriteI2C
  1024                           
  1025                           ;main.c: 191: bufferIndex++;
  1026  003D  3001               	movlw	1
  1027  003E  00F3               	movwf	??_isr
  1028  003F  0873               	movf	??_isr,w
  1029  0040  07F8               	addwf	_bufferIndex,f
  1030                           
  1031                           ;main.c: 192: SSP1CON1bits.CKP = 1;
  1032  0041  0024               	movlb	4	; select bank4
  1033  0042                     L2:	
  1034  0042  1615               	bsf	21,4	;volatile
  1035                           
  1036                           ;main.c: 194: }
  1037                           
  1038                           ;main.c: 193: break;
  1039  0043  2852               	goto	i1l81
  1040  0044                     i1l836:	
  1041  0044  0877               	movf	isr@tempSSPSTAT,w
  1042                           
  1043                           ; Switch size 1, requested type "space"
  1044                           ; Number of cases is 4, Range of values is 9 to 45
  1045                           ; switch strategies available:
  1046                           ; Name         Instructions Cycles
  1047                           ; simple_byte           13     7 (average)
  1048                           ; direct_byte           83     9 (fixed)
  1049                           ; jumptable            263     9 (fixed)
  1050                           ;	Chosen strategy is simple_byte
  1051  0045  3A09               	xorlw	9	; case 9
  1052  0046  1903               	skipnz
  1053  0047  2816               	goto	i1l798
  1054  0048  3A04               	xorlw	4	; case 13
  1055  0049  1903               	skipnz
  1056  004A  282E               	goto	i1l814
  1057  004B  3A24               	xorlw	36	; case 41
  1058  004C  1903               	skipnz
  1059  004D  281C               	goto	i1l804
  1060  004E  3A04               	xorlw	4	; case 45
  1061  004F  1903               	skipnz
  1062  0050  2833               	goto	i1l824
  1063  0051  2852               	goto	i1l81
  1064  0052                     i1l81:	
  1065  0052  0874               	movf	??_isr+1,w
  1066  0053  0020               	movlb	0	; select bank0
  1067  0054  00FF               	movwf	127
  1068  0055  0009               	retfie
  1069  0056                     __end_of_isr:	
  1070                           
  1071                           	psect	text6
  1072  00E1                     __ptext6:	
  1073 ;; *************** function _WriteI2C *****************
  1074 ;; Defined at:
  1075 ;;		line 137 in file "main.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;  transmitByte    1    wreg     unsigned char 
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;  transmitByte    1    1[COMMON] unsigned char 
  1080 ;;  writeCollisi    1    2[COMMON] unsigned char 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;		None               void
  1083 ;; Registers used:
  1084 ;;		wreg, status,2, status,0
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMMON   BANK0   BANK1
  1090 ;;      Params:         0       0       0
  1091 ;;      Locals:         2       0       0
  1092 ;;      Temps:          1       0       0
  1093 ;;      Totals:         3       0       0
  1094 ;;Total ram usage:        3 bytes
  1095 ;; Hardware stack levels used:    1
  1096 ;; This function calls:
  1097 ;;		Nothing
  1098 ;; This function is called by:
  1099 ;;		_isr
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           
  1104                           ;psect for function _WriteI2C
  1105  00E1                     _WriteI2C:	
  1106                           
  1107                           ;incstack = 0
  1108                           ; Regs used in _WriteI2C: [wreg+status,2+status,0]
  1109                           ;WriteI2C@transmitByte stored from wreg
  1110  00E1  00F1               	movwf	WriteI2C@transmitByte
  1111                           
  1112                           ;main.c: 138: unsigned char writeCollision = 1;
  1113  00E2  01F2               	clrf	WriteI2C@writeCollision
  1114  00E3  0AF2               	incf	WriteI2C@writeCollision,f
  1115  00E4                     i1l61:	
  1116                           ;main.c: 140: while (SSP1STAT & 0x01);
  1117                           
  1118  00E4  0024               	movlb	4	; select bank4
  1119  00E5  1C14               	btfss	20,0	;volatile
  1120  00E6  28F4               	goto	i1l768
  1121  00E7  28E4               	goto	i1l61
  1122  00E8                     i1l758:	
  1123                           ;main.c: 141: while (writeCollision){
  1124                           
  1125                           
  1126                           ;main.c: 142: SSP1CON1 &= ~0x80;
  1127  00E8  307F               	movlw	127
  1128  00E9  00F0               	movwf	??_WriteI2C
  1129  00EA  0870               	movf	??_WriteI2C,w
  1130  00EB  0595               	andwf	21,f	;volatile
  1131                           
  1132                           ;main.c: 143: SSP1BUF = transmitByte;
  1133  00EC  0871               	movf	WriteI2C@transmitByte,w
  1134  00ED  0091               	movwf	17	;volatile
  1135                           
  1136                           ;main.c: 144: if (SSP1CON1 & 0x80)
  1137  00EE  1F95               	btfss	21,7	;volatile
  1138  00EF  28F3               	goto	i1l766
  1139                           
  1140                           ;main.c: 145: writeCollision = 1;
  1141  00F0  01F2               	clrf	WriteI2C@writeCollision
  1142  00F1  0AF2               	incf	WriteI2C@writeCollision,f
  1143  00F2  28F4               	goto	i1l768
  1144  00F3                     i1l766:	
  1145                           
  1146                           ;main.c: 146: else
  1147                           ;main.c: 147: writeCollision = 0;
  1148  00F3  01F2               	clrf	WriteI2C@writeCollision
  1149  00F4                     i1l768:	
  1150  00F4  08F2               	movf	WriteI2C@writeCollision,f
  1151  00F5  1D03               	skipz
  1152  00F6  28E8               	goto	i1l758
  1153                           
  1154                           ;main.c: 148: }
  1155                           ;main.c: 149: SSP1CON1 |= 0x10;
  1156  00F7  1615               	bsf	21,4	;volatile
  1157  00F8  0008               	return
  1158  00F9                     __end_of_WriteI2C:	
  1159  007E                     btemp	set	126	;btemp
  1160  007E                     wtemp	set	126
  1161  007E                     wtemp0	set	126
  1162  0080                     wtemp1	set	128
  1163  0082                     wtemp2	set	130
  1164  0084                     wtemp3	set	132
  1165  0086                     wtemp4	set	134
  1166  0088                     wtemp5	set	136
  1167  007F                     wtemp6	set	127
  1168  007E                     ttemp	set	126
  1169  007E                     ttemp0	set	126
  1170  0081                     ttemp1	set	129
  1171  0084                     ttemp2	set	132
  1172  0087                     ttemp3	set	135
  1173  007F                     ttemp4	set	127
  1174  007E                     ltemp	set	126
  1175  007E                     ltemp0	set	126
  1176  0082                     ltemp1	set	130
  1177  0086                     ltemp2	set	134
  1178  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       9
    BANK0            80      9      25
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_WriteI2C

Critical Paths under _main in BANK0

    _main->_SetPWMDutyCyle

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4      67
                                              5 BANK0      4     0      4
                     _SetPWMDutyCyle
                               _init
                           _startPWM
                            _stopPWM
 ---------------------------------------------------------------------------------
 (1) _stopPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _startPWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPWMDutyCyle                                       5     5      0      67
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  5     5      0      95
                                              3 COMMON     5     5      0
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _WriteI2C                                             3     3      0      47
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetPWMDutyCyle
   _init
   _startPWM
   _stopPWM

 _isr (ROOT)
   _WriteI2C

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      22       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      19       6       31.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      22       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Mon Jan 20 11:10:27 2014

                   __CFG_CP$OFF 0000                              l84 00C9                     __CFG_LVP$ON 0000  
                           l784 00D8                             l778 00D1                             _PR2 001B  
                  __CFG_CPD$OFF 0000                             _isr 0004                    __CFG_BORV$LO 0000  
                           wreg 0009                    __CFG_IESO$ON 0000                            ?_isr 0070  
                          i1l61 00E4                            i1l81 0052                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000                            _main 00C5                            _init 0060  
                          fsr0h 0005                            fsr1h 0007                            fsr0l 0004  
                          indf0 0000                            indf1 0001                            fsr1l 0006  
                          btemp 007E                   __CFG_BOREN$ON 0000                            ltemp 007E  
                          start 0056                            ttemp 007E                            wtemp 007E  
                         ??_isr 0073                           ?_main 0035                           ?_init 0070  
                 __CFG_WDTE$OFF 0000                           i1l804 001C                           i1l814 002E  
                         i1l824 0033                           i1l836 0044                           i1l766 00F3  
                         i1l758 00E8                           i1l768 00F4                           i1l798 0016  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                     isr@i2c_mask 0076                           ttemp0 007E  
                         ttemp1 0081                           ttemp2 0084                           ttemp3 0087  
                         ttemp4 007F                 __end_of_stopPWM 0102                           wtemp0 007E  
                         wtemp1 0080                           wtemp2 0082                           wtemp3 0084  
                         wtemp4 0086                           wtemp5 0088                           wtemp6 007F  
                __CFG_MCLRE$OFF 0000                 __initialization 0057                    __end_of_main 00E1  
                  __end_of_init 009F                          ??_main 0039                          ??_init 0030  
                __CFG_PLLEN$OFF 0000                          _CCPR1L 0291                __end_of_WriteI2C 00F9  
                __CFG_PWRTE$OFF 0000                  __CFG_STVREN$ON 0000                __end_of_startPWM 0105  
                     ??_stopPWM 0030         __end_of__initialization 005E                  __pcstackCOMMON 0070  
        WriteI2C@writeCollision 0072                      __pbssBANK0 0020                      __pmaintext 00C5  
       __size_of_SetPWMDutyCyle 0026                      __pintentry 0004                       ?_WriteI2C 0070  
      SetPWMDutyCyle@duty_cycle 0033                         _SSP1ADD 0212                         _SSP1BUF 0211  
                     ?_startPWM 0070                      ??_WriteI2C 0070                         __ptext0 0000  
                       __ptext1 00FF                         __ptext2 0102                         __ptext3 0060  
                       __ptext4 009F                         __ptext6 00E1                       _T2CONbits 001C  
                  __size_of_isr 0052                   _receiveBuffer 0020                         _stopPWM 00FF  
                    _sendBuffer 0028                         clrloop0 00FA            end_of_initialization 005E  
                       isr@temp 0075                      ??_startPWM 0030                __CFG_FOSC$INTOSC 0000  
                     _TRISAbits 008C                     _DACCON0bits 0118                     _CCP1CONbits 0293  
                _SetPWMDutyCyle 009F             start_initialization 0057                     __end_of_isr 0056  
                isr@tempSSPSTAT 0077          __end_of_SetPWMDutyCyle 00C5               __size_of_WriteI2C 0018  
                   __pbssCOMMON 0078                       ___latbits 0000                   __pcstackBANK0 0030  
               ?_SetPWMDutyCyle 0070               __size_of_startPWM 0003  SetPWMDutyCyle@duty_cycle_value 0032  
                      ?_stopPWM 0070                       clear_ram0 00F9                        _PIE1bits 0091  
                   _bufferIndex 0078                        _PIR1bits 0011                        _SSP1CON1 0215  
                      _SSP1CON2 0216                        _SSP1CON3 0217                        _SSP1STAT 0214  
                    _ADCON0bits 009D                      _APFCONbits 011D                        _WriteI2C 00E1  
                    _ANSELAbits 018C                    _SSP1CON1bits 0215                __size_of_stopPWM 0003  
                 __size_of_main 001C                   __size_of_init 003F                        _startPWM 0102  
                      main@argc 0035                        main@argv 0037                      _INTCONbits 000B  
                      intlevel1 0000                ??_SetPWMDutyCyle 0030               __CFG_CLKOUTEN$OFF 0000  
                    _OSCCONbits 0099            WriteI2C@transmitByte 0071  
